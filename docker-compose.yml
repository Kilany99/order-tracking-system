
services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1999King
      POSTGRES_DB: delivery
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - my-network  
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      retries: 5
      timeout: 5s

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - my-network  
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    healthcheck:
      test: ["CMD", "kafka-topics", "--list", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      retries: 5
      timeout: 5s
    depends_on:
      - zookeeper
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_MIN_INSYNC_REPLICAS: 1
    networks:
      - my-network  
    ports:
      - "9092:9092"
      - "29092:29092"

  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    ports:
      - "5000:50"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - my-network  
    
    environment:
      ConnectionStrings__Postgres: "Host=postgres;Database=delivery;Username=postgres;Password=1999King"
      Kafka__BootstrapServers: "kafka:9092"
      DriverService__BaseUrl: http://driver-service


    
  driver-service:
    build:
      context: ./driver-service
      dockerfile: Dockerfile
    ports:
      - "8080:80"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongodb:  
        condition: service_healthy
    networks:
      - my-network  


    environment:
      ConnectionStrings__Postgres: "Host=postgres;Database=driver;Username=postgres;Password=1999King"
      Kafka__BootstrapServers: "kafka:9092"
      ConnectionStrings__MongoDb: "mongodb://root:1999King@mongodb:27017/driver_db?authSource=admin"  


  customer-service:
    build:
      context: ./customer-service
      dockerfile: Dockerfile
    networks:
      - my-network  
    ports:
      - "8000:3000"

  mongodb:
    image: mongo:6.0
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: 1999King
    ports:
      - "27017:27017"
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh --quiet localhost:27017/admin -u root -p 1999King --authenticationDatabase admin || exit 1
      interval: 5s
      timeout: 30s
      retries: 5
    networks:
      - my-network
    volumes:
      - mongodb-data:/data/db

    
  redis:
    image: redis:7.0
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      retries: 3
      timeout: 5s
    networks:
      - my-network  



  notification-service:
      build:
        context: ./notification-service
        dockerfile: Dockerfile
      depends_on:
        postgres:
          condition: service_healthy
        kafka:
          condition: service_healthy
      environment:
        ConnectionStrings__Postgres: "Host=postgres;Database=notifications;Username=postgres;Password=1999King"
        Kafka__BootstrapServers: "kafka:9092"
        Email__SmtpServer: "smtp.gmail.com"
        Email__SmtpPort: "587"
        Email__Username: "arrow9307502abdallah@gmail.com"
        Email__Password: "htee idww ldns zldk"
      ports:
      - "8050:80"
      networks:
        - my-network

  grafana:
    image: grafana/grafana:10.2.0
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    volumes:
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=1999Guzel!!
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/var/lib/grafana/dashboards/default.json
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
      - GF_AUTH_DISABLE_LOGIN_FORM=false
    networks:
      - my-network
  prometheus:
    image: prom/prometheus:v2.45.0
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    networks:
      - my-network
networks:
  my-network:  
    driver: bridge


volumes:
  postgres-data:
  mongodb-data:
  redis-data:  
  prometheus_data:
  grafana_data: